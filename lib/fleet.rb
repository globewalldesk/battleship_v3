require './lib/settings'
require 'ostruct'
require './lib/ship_coords'
include ShipCoordsModule

# The classes for making, tracking, and destroying a fleet.
module FleetModule

  ##############################################################################
  ##############################################################################

  # Creates and places ships of the fleet (setup only).
  class FleetConstructor
    attr_accessor :fleet, :player_or_enemy, :board, :autogenerated
    def initialize(options)
      @fleet = construct_ship_types # an array of ship structs
      @player_or_enemy = options[:player_or_enemy]
      @board = options[:board] # a Board object; .board elicits the dots array
      @dotty_board = @board.board # for convenience, the dots array
      @autogenerated = nil # player must decide if ships are placed automatically
      construct_ship_details # Creates ship details.
      get_ship_coords # Get ship coords for ships.
      # Initializes FleetStatus.
    end

    ############################################################################

    # Creates the ships of the fleet (ship types only).
    # To add ship types, edit construct_ship_types and construct_ship_details.
    def construct_ship_types
      fleet_starter = [] # THIS NEEDS REFACTORING! SHOULD I BE CALLING .self?!
      %w[carrier battleship submarine warship destroyer].each do |this_type|
        ship = OpenStruct.new # creates an extensible Struct for ships
        ship.type = this_type
        fleet_starter << ship
        ship.send this_type
        case this_type
        when "carrier"
          then ship.carrier = ship  # accessor for a named ship from within fleet
        when "battleship"
          then ship.battleship = ship
        when "submarine"
          then ship.submarine = ship
        when "warship"
          then ship.warship = ship
        when "destroyer"
          then ship.destroyer = ship
        end
      end
      fleet_starter # array of Structs armed only with 'type' method
    end

    ############################################################################

    # Populates the ship Ostructs with their basic information features.
    # This and construct_ship_types should be the only place where ships types
    # are listed.
    def construct_ship_details
      @fleet.each do |ship|
        case ship.type
        when "carrier"
          then ship.coord_count = 5 # a measure of ship length
        when "battleship"
          then ship.coord_count = 4
        when "submarine"
          then ship.coord_count = 3
        when "warship"
          then ship.coord_count = 3
        when "destroyer"
          then ship.coord_count = 2
        end
        ship.unhit = ship.type[0].upcase # e.g., 'B'
        ship.sunk = ship.type[0].downcase # e.g., 'b'
        ship.board = @board # remember, the dots are at this.board
      end
    end

    ############################################################################

    # prompts player: autogenerate ship orientation and position, or not?
    def does_player_want_to_automate_ship_creation
      $message << "Do you want to set up ships [y]ourself, or [a]utomagically? "
      answer = ""
      until answer == 'y' || answer == 'a'
        answer = @board.show_board_and_get_input
        $message << "Either 'y' or 'a', please. " unless
            answer == 'y' || answer == 'a'
      end
      @autogenerated = (answer == 'a' ? true : false)
    end

    ############################################################################

    # this flips the '.' at the coords for a particular ship to the '.unhit' char
    def save_ship_to_board(coords, ship)
      # add '.unhit' chars for this ship to the fleet's new board
      # I'm trying to take the coordinates given and flip just the right '.' in @board
      puts "@dotty_board class is #{@dotty_board.class} ....... #{@dotty_board.inspect}"
      # puts "@dotty_board before = #{@dotty_board}"
      # God, I can't just say @dotty_board[row][col] = foo???
      puts "5,5 was #{@dotty_board[5][5]}"
      puts "now let's see about 6,5: #{@dotty_board[6][5]}"
      @dotty_board[5][5] = 'C'
      puts "5,5 is now #{@dotty_board[5][5]}"
      puts "now let's see about 6,5: #{@dotty_board[6][5]}"
      @ditty_board = [[".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
      [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
      [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
      [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
      [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
      [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
      [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
      [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
      [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
      [".", ".", ".", ".", ".", ".", ".", ".", ".", "."]]
      puts "@ditty_board class is #{@ditty_board.class} ....... #{@ditty_board.inspect}"
      # puts "@ditty_board before = #{@ditty_board}"
      # God, I can't just say @ditty_board[row][col] = foo???
      puts "5,5 was #{@ditty_board[5][5]}"
      puts "now let's see about 6,5: #{@ditty_board[6][5]}"
      @ditty_board[5][5] = 'C'
      puts "5,5 is now #{@ditty_board[5][5]}"
      puts "now let's see about 6,5: #{@ditty_board[6][5]}"

      row, col = 0, 0
      @dotty_board.map do |row|
        row.map do |col|
          #Surely this isn't going to be necessary...
        end
      end
      # puts "@dotty_board after = #{@dotty_board}"
      $message << "Added #{ship.type} at #{ship.coords[0]}. "
    end

    ############################################################################

    # Calls EnemyShipCoords or PlayerShipCoords to assign coords to each ship.
    # Not 100% that this is what Sandi Metz/OOD would recommend.
    def get_ship_coords
      @fleet.each do |ship|
        if @player_or_enemy == "enemy"
          good_coords = EnemyShipCoords.new(ship:ship, fleet:@fleet)
          save_ship_to_board(good_coords.coords, ship)
        end
        if @player_or_enemy == "player"
          # ask if player wants to automate ship creation, only if he has not
          # yet chosen; saves result in @autogenerated
          does_player_want_to_automate_ship_creation if @autogenerated == nil
          good_coords = PlayerShipCoords.new(ship:ship, fleet:@fleet,
            board:@board, autogenerated:@autogenerated)
          save_ship_to_board(good_coords.coords, ship)
          if @autogenerated == true
            $message << "Here is how your ships are placed. [Enter] to continue. "
            @board.show_board_and_get_input
          end
        end
      end # of this ship
    end # of get_ship_coords

    ############################################################################

  end # of class FleetConstructor

end # of module Fleet
