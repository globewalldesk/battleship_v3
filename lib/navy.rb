require './lib/settings'
require './lib/board'
require './lib/ship'
require './lib/ship_coords'

# The individual ships and fleet of a contender (player or enemy)
class Navy
  attr_accessor :contender, :fleet, :board, :carrier, :battleship, :submarine,
  :warship, :destroyer
  def initialize (contender, autogenerated)
    @contender = contender
    @autogenerated = autogenerated
    # create blank board; the board array itself is accessed via .board
    header = header_generator(@contender) # adds header to board, from misc
    @board = Board.new(header)
    @fleet = [] # this will become the fleet, eventually
    generate_individual_ships
    # fetch fleet coords automatically or from player; both methods below
    @autogenerated == true ? get_ship_coords_automatically :
      get_ship_coords_from_player
  end

  ############################################################################

  # Generates the (for now) five ships of the fleet by calling Ship.new
  def generate_individual_ships
    # for each ship type, create it and then assign it to its accessor
    %w|carrier battleship submarine warship destroyer|.each do |type|
      ship = Ship.new(type)
      case type
      when "carrier"
        then @carrier = ship
      when "battleship"
        then @battleship = ship
      when "submarine"
        then @submarine = ship
      when "warship"
        then @warship = ship
      when "destroyer"
        then @destroyer = ship
      end
      @fleet << ship # for fleet-building
    end
  end

  ############################################################################

  # automatically gets ship coords (placed within ship objects)
  def get_ship_coords_automatically
    @fleet.each do |ship|
      # fetch coords for this ship automatically, given fleet and board
      # no return needed, as ship is an object which is updated by ShipCoords
      ShipCoords.new(ship:ship, fleet:@fleet, board:@board)
      @board.save_ship_to_board(ship)
      ship_count = 0
      if @autogenerated == true && ship_count == 4
        $message << "Here is how your ships are placed. [Enter] to continue. " unless
          $testing == true # see comment in settings.rb
        @board.show_board_and_get_input unless $testing == true
      end
      ship_count += 1
    end # of this ship
  end

  # solicit coords from player (placed within ship objects)
  def get_ship_coords_from_player
    @fleet.each do |ship|
      valid_coords = false
      until valid_coords == true
        @board.get_player_orientation(ship)
        @board.get_player_coords(ship) # FINISH THIS!!!
      end
      # Next, check that the coords fit on the board; use ShipCoords for this
      # Finally, @board.save_ship_to_board(ship)
    end
  end

  ############################################################################

end # of class Navy
